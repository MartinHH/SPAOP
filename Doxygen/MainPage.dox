/*! \mainpage SPAOP

This is the documentation for [SPAOP](https://github.com/MartinHH/SPAOP) (Spatial Audio Object Positioner), a VST/VST3/AU/RTAS plugin to control audio object's positions within the [WONDER system for wave field synthesis](http://sourceforge.net/projects/swonder/).

It consists of a main VST/VST3/AU/RTAS plugin (built using the [JUCE](http://www.juce.com/) framework) and a helper application named the StreamMulticaster.

For further information, have a look at the following pages:

- \ref requirements - what you need to get going.
- \ref installation - how to compile and install things.
- \ref defines - an overview of options you can set at compile-time.
- \ref coding - some recommendations for those who want to change the code or reuse it for other projects.
- \ref usage - how to use SPAOP and the StreamMulticaster

*/

//-----------------------------------------------------------

/*! \page requirements Requirements

To build and use the SPAOP plugin and the StreamMulticaster application, you will need the following:


\section os Operating System(s)

Generally, both OSX and Windows are supported - with the following limitations (please report if you find more):
- OSX version should be 10.7 or higher. SPAOP relies on the multithreading capabilities of C++11 which are not officially supported by Apple for OSX versions below 10.7. If you know a workaround for that, feel free to report it.


\section Libraries

These libraries are required:
- [Liblo](http://Liblo.sourceforge.net/) - Liblo's threading capabilities are not needed, so if you're on Windows, feel free to use the `--without-threads` option (see [Building Liblo for other platforms](http://Liblo.sourceforge.net/README-platforms.html))
- [JUCE](http://www.juce.com/) - it is recommended to use the fork of JUCE that is included as a submodule of the SPAOP repository

The \ref installation "Installation section" will provide further hints on how to get them.

\section SDKs

Depending on what platform you want to build the plugin for, you will need the corresponding SDK(s) for VST, AU or RTAS.

\section IDEs

You will need a C++11-capable IDE for the operating system you are bulding for - the code was written and tested using XCode 5.1 on OSX and Visual Studio 2013 on Windows.

*/



//-----------------------------------------------------------



/*! \page installation Installation

\tableofcontents

This page provides hints for building and installing SPAOP, the StreamMulticaster and the required libraries. Please note that those libraries have their own installation documentations and the information here is just a collection of hints on how to get it right. 

\section quickguide A quick guide

Before going into the details, here is a brief overview of the steps needed to get running versions of SPAOP and the StreamMulticaster:

-# Clone the [SPAOP repository](https://github.com/MartinHH/SPAOP)
-# Fetch the \ref submodules "submodules"
-# Obtain and build \ref Liblo
-# Build the \ref usingjuce "Introjucer"
-# Obtain the \ref sdks you need
-# \ref buildspaop "Build SPAOP" from its .jucer file
-# \ref buildmulticaster "Build the StreamMulticaster" from one of its IDE projects

\section submodules Submodules

The SPAOP repository contains two submodules: one for a [fork of the JUCE library](https://github.com/MartinHH/JUCE), one for [the Github pages containing this documentation](https://martinhh.github.io/SPAOP). To pull them in, go to the base directory of the SPAOP repository and do the following two steps:

	# 1. initialize the submodules:
	$ git submodule init
	# 2. pull in the submodules' content:
	$ git submodule update

\section Liblo Liblo

The Liblo library can be downloaded from [http://Liblo.sourceforge.net/](http://Liblo.sourceforge.net/).

\subsection osx OSX

For OSX, the process to build and install is straightforward and well-documented. Just keep in mind that if you want to build for both 32 and 64 bit architectures, you'll need to build the universal binary version of Liblo.

The most convenient way is to use [Homebrew](http://brew.sh/): if you have Homebrew installed, just type in `brew install Liblo --universal`. The library and header include paths in the OSX project files within the SPAOP repository all point to the paths where Homebrew will put them, so doing it the Homebrew way should be the easiest way by far.

\subsection windows Windows

For Windows, it is a bit more complicated:

Follow the [building Liblo for other platforms](http://Liblo.sourceforge.net/README-platforms.html) instructions (and feel free to use the `--without-threads` option). At the moment (Liblo version 0.28), the premake4-script only supports Visual Studio versions up to 2010 - however, the automatic update options of Visual Studio 2013 will work fine on the 2010 project generated by it.

One more thing: at this moment, there is still something you need to fix in the Liblo-headers: in lo_osc_types.h, change line 25 (`#ifdef _MSC_VER`) to:

	#if defined(_MSC_VER) && _MSC_VER < 1600


(If this still hasn't been fixed when you're reading this, you're invited to support my [change request on the Liblo mailing list](http://sourceforge.net/p/Liblo/mailman/message/32182802/).)

\section juce JUCE

The JUCE library's official website is [www.juce.com](http://www.juce.com/) - there you will find documentation, a very active forum and download links. However, there are some reasons not to use the official version and rather chose the fork that is included as a submodule.

\subsection jucefork The JUCE fork

\subsubsection whyfork Reason for the fork

One of the main use cases for SPAOP is editing the automation data of source positions within the DAW host. There are a few features of both the VST3 and AU interface related to how a plugin's parameter is displayed within the host that are not supported correctly by JUCE - that is fixed in that fork ([see here for a diff](https://github.com/MartinHH/JUCE/compare/julianstorer:master...developMH#files_bucket)).

\subsubsection aboutfork About the fork

The fork contains two main branches. The `master` branch is meant to be an exact copy of the [official master](https://github.com/julianstorer/JUCE) and can get updated from there. The `developMH` branch contains any changes to the original JUCE and is the one to be used for building SPAOP if you want to take advantage from the fork.

\subsubsection gettingfork Fetching the fork

The recommended way to get a local copy of the fork is to fetch it as submodule of the SPAOP repository. Go to the base directory of the SPAOP repository and enter `git submodule init` and `git submodule update` (see the [Submodules chapter in Pro Git](http://git-scm.com/book/en/Git-Tools-Submodules) to learn more about that). After that is done, the full JUCE repository can be found within the JUCE directory of the SPAOP repository.

\subsection usingjuce Using JUCE and the Introjucer

JUCE is well documented so do not expect any details here - just a few words: the JUCE way to mangage a project is to use the [Introjucer](http://www.juce.com/documentation/introjucer). The Introjucer is an application that lets you create and manage projects for different IDEs and includes a WYSIWYG GUI editor.

It stores its projects in `.jucer` files. So for example, if you want to open the SPAOP project, you would open the SPAOP.jucer file in the Introjucer and launch your IDE from there.

To use the Introjucer, you will need to build it yourself. You can find ready-made projects for various IDEs under `./JUCE/extras/Introjucer/Builds/`.

\section sdks Plugin SDKs

You will need to get the official software development kits for the plugin platforms you want to build for.

\subsection steinberg VST and VST3

The VST3 SDK (which includes everything needed to build VST2 as well) can be downloaded from [http://www.steinberg.de/en/company/developer.html](http://www.steinberg.de/en/company/developer.html). If you want to avoid readjusting some path settings within the SPAOP.jucer file, place it in the same directory where you cloned the SPAOP repository.

\subsection au Audio Units

Audio Units plugin are OSX-only. Older versions of Apple's Xcode IDE include the AU SDK. For newer versions of Xcode, you will have to download it from Apple. Currently, it is not fully compatible with the latest Xcode without fixing a few things manually. All steps to get this going are documented [here](http://teragonaudio.com/article/Building-AudioUnits-with-modern-Mac-OSX.html) (if that link ever becomes unavailable try [this thread in the JUCE forum](http://www.juce.com/forum/topic/aus-xcode)).

\subsection rtas RTAS

The RTAS-version of SPAOP has never been tested yet. If you want to give it a try, [this application form](https://www.avid.com/us/partners/Developer-Program/AudioPlugin) should lead you to the RTAS SDK.

\section buildspaop Building SPAOP

Once you have all that installed, you can open the file `./SPAOP/SPAOP.jucer` with the \ref usingjuce "Introjucer". From there you can launch the project in the IDE of your choice and build it. If you have placed the VST SDK or Liblo in different locations to those recommended above, you might need to readjust these within the project's settings in the introjucer.

Have a look at the \ref defines page for options you can set at compile-time (most importantly, the IP and port of cWONDER are set via the defines CWONDER_DEFAULT_IP_STR and CWONDER_DEFAULT_PORT_STR).



\section buildmulticaster Building the StreamMulticaster

For building the StreamMulticaster, Xcode and VS 2013 projects can be found within `./StreamMulticaster`. Once again, you might need to readjust the location of the Liblo files. For the connection settings, the \ref defines "defines" from WonderHeader.h are applied (so change them as needed).


*/



//-----------------------------------------------------------



/*! \page defines Preprocessor defines


Several options (most importantly: the network addresses of the WONDER system) can be changed by setting preprocessor defines.

\section parameter_defines Parameter-Defines in WonderHeader.h

There are a few parameters for both the plugin and the StreamMulticaster (network addresses, parameter ranges, ...) that are defined in the file WonderHeader.h - so have a look at the file's documentation page for details on those parameters.

\section spaop_discrete SPAOP_DISCRETE

Setting the flag `SPAOP_DISCRETE` will change the coordinates and rotation angle parameter's types from non-discrete to discrete. This is relevant for how the plug-in's host handles those parameters:

Normally (witout `SPAOP_DISCRETE` set), the host can set the parameters to any value within their range ([-COORD_MAX , COORD_MAX] for coordinates, [0.0 , 360.0] for the rotation angle). When `SPAOP_DISCRETE` is set, the host can only set them to discrete values within that range: coordinates are discretised to steps of 1 cm (meaning values can only be one of (-COORD_MAX, -COORD_MAX + 0.01, -COORD_MAX + 0.02, ..., COORD_MAX - 0.01, COORD_MAX)), the angle is discretised to steps of 0.1 degree (meaning values can only be one of (0.0, 0.1, 0.2, ..., 360.0)).

So what is the use for that flag? After recording automation data, certain hosts will "reduce" the automation data and interpolate automation values they deem to be irrelevant. Some hosts have settings where this feature can be turned off (e.g. Cubase's full versions), others don't (e.g. the LE versions of Cubase). By setting the `SPAOP_DISCRETE` flag some hosts (e.g. Cubase) can be forced not to reduce any automation data (apparently, any change of discrete parameter values is considered to be relevant). The downside however is that certain options to manipulate automation data might not be available for discretised parameters (e.g. in Cubase, "drawing" a diagonal automation by setting two automation points is only possible for non-discrete values).

*/

//-----------------------------------------------------------

/*! \page coding Coding recommendations

Of course, you are free to modify the code as you like. However, this page is meant to explain a few desgin concepts behind the code, hoping whoever uses the code might find this useful.

\tableofcontents

\section introjucer Use the Introjucer

Use the Introjucer for any changes to the project (e.g. adding new source files). That way, those changes affect both the Windows and the OSX projects. 

\section namespaces Namespaces and library-(in)dependency

A lot of the code was written to be independent of any third party library. This is reflected by the different namespaces (and the corresponding source code structure). Have a look at the [Namespaces](namespaces.html) page for details.

Please try to stick to this system and do not include third party libraries in namespaces that were meant not to rely on third party libraries. Also, it is recommended to make use of the \ref interfaces that were provided to be able to switch third party libraries where they are needed.

\section interfaces Interfaces

Within the main namespace [wonder](namespacewonder.html), wherever functionalities from third party libraries are needed, interfaces are defined to allow free choice of which library is used. These interfaces are:
- wonder::OscSender An interface for sending WONDER-related OSC messages. Several Liblo-based implementations can be found within namespace wonderlo.
- wonder::OscSenderThread An interface adding thread capabilities to the wonder::OscSender interface. See wonderlo::WonderOscServerSenderThread for a Liblo-based implementation.
- wonder::VisualStreamReceiver An interface for a thread that listens to the incoming OSC messages that are sent by cWONDER as the "Visual Stream", along with a listener interface for corresponding callbacks. See wonderlo::VSReceiver for a Liblo-based implementation.
- wonder::ConnectionTimer An interface defining a cyclic timer. See wonderjuce::JuceConnectionTimer for a JUCE-based implementation.
- wonder::XmlParser An interface for parsing the "xmlDump" XML string that is sent from cWONDER. A JUCE-based implementation is contained as a private class within wonderjuce::XmlFactory and can be accessed via the singleton-getter wonderjuce::XmlFactory::getParser.

These interfaces also define factory interfaces (as internal classes). If you inject these factories into your classes via the constructor and use them to create new instances, you can keep you code decoupled from the actual implementations of those interfaces. For an example, have a look at the constructor code of wonder::SourceController or wonder::PingControl.
*/
  
//-----------------------------------------------------------

/*! \page usage Usage

\tableofcontents

Although (hopefully) most things should be self-explanatory if you're used to working with both the WONDER system and audio-plugins, here are a few words on how to use SPAOP and the StreamMulticaster.

\section modes The two communication modes

There are two different contexts in which the SPAOP plugin may be used: either connected to a WONDER system ("Linked to WONDER" mode) or on its own, without being connected to WONDER ("Standalone" mode).

\subsection linked Linked to WONDER

When operating SPAOP in connection with WONDER, you need to do the following steps:

-# Make sure the machine you are using is connected to the WONDER OSC network
-# Start the WONDER system
-# Load or create an empty WONDER project (e.g. using xWONDER)
-# Start an instance of the StreamMulticaster from the command line
-# Load SPAOP within your DAW (one instance per WONDER source)
-# \ref sourceselection "Set a source-ID for each SPAOP instance and lock it"
-# \ref connection "Activate the Link to WONDER setting"

Note that currently, all network settings are fixed at compiletime, so your SPAOP-plugin must be compiled for the WONDER setup you want to use.

Also, there is a known bug that will make xWONDER act weird when it is started after SPAOP and the StreamMulticaster, so try to avoid that (and don't be surprised in case that happens).

\subsection standalone Standalone

Standalone mode allows you to edit your project (parameter automations) etc even when you're not connected to WONDER. Of course, no wave field synthesis will happen in that case, but you can prepare your project for subsequent use with WONDER. All you need to do for that is:

-# Load SPAOP within your DAW (one instance per WONDER source)
-# ref sourceselection "Set a source-ID for each SPAOP instance and lock it"

\section gui The Plugin

Let's have a quick look at the GUI of the Plugin:

\image html GUI.png "The SPAOP plugin"

On the left, there is the two-dimensional panel from where you can control the source's position. Note that with each SPAOP instance, you can only control one source. On the right, there are four sections which shall be explained in top-to-bottom order:

\subsection sourceselection Source selection

Here you must choose the WONDER-specific source-ID. Every SPAOP-instance should be associated with a different source-ID. You must confirm your choice by checking the "Lock" checkbox. If you do not "lock" the source-ID, no OSC messages will be sent and the plugin will stay inactive.

\subsection sourceparameters Source parameters

This is where you set all parameters of the source (besides its position).

\subsection connection Connection

Here you can toggle between \ref linked and \ref standalone modes. Also, the destination address where the outgoing OSC-messages are sent is displayed. When connected to WONDER, you will also see information on the connection status.

\subsection dsiplay Display

The display settings allow you to control what is being displayed in the panel on the left side. You can control whether the other sources (not controlled by the current SPAOP instance) shall be displayed and whether the names of the sources shall be shown. Also, you can use a slider to zoom in or out.
*/
